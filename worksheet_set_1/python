{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "813dc2c3-65c2-4d93-823f-13c5cb84b9a6",
   "metadata": {},
   "source": [
    "# answer 11 - 15   python programe"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cab4979-439a-456d-9a89-0f14fd7e4658",
   "metadata": {},
   "source": [
    "# ans.11  create a factorial programe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "59a1d32f-bc30-468b-8f02-326592ebeafe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your factorial number:- 8\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "factorial of number=   40320\n"
     ]
    }
   ],
   "source": [
    "n = int(input('Enter your factorial number:-')) \n",
    "factorial = 1\n",
    "i = 1\n",
    "while i<=n:\n",
    "    factorial *= i\n",
    "    i += 1\n",
    "print('factorial of number=  ',factorial)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db4b20d1-5edf-441b-aade-2cfc2cc43efb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "4b16fdaf-177b-4ef1-936b-ce6086f2036f",
   "metadata": {},
   "source": [
    "# ans.12 create a programme find out prime and compsite number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e57e2c63-1138-46fc-bc47-bda5018fa6b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter your number:-  7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7 is prime number\n"
     ]
    }
   ],
   "source": [
    "num = int(input('enter your number:- '))\n",
    "\n",
    "if num > 1:\n",
    "\n",
    "    for i in range(2, (num//2)+1):\n",
    "        if (num % i) == 0:\n",
    "            print(num, 'is composite number')\n",
    "            break\n",
    "    else:\n",
    "        print(num, \"is prime number\")\n",
    "else:\n",
    "    print(num, \"is no both \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10d392f4-4903-44d2-a73b-c8f0ea2a858c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a5acd2bd-975c-4052-9292-f4795a20effe",
   "metadata": {},
   "source": [
    "# ans. 13 create a programe string is palindrome yes or not "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cd869fe5-6094-4e2f-bc23-ed7b1ccbb014",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter your string:  naman\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this string is palindrome\n"
     ]
    }
   ],
   "source": [
    "string = input('enter your string: ')\n",
    "\n",
    "reverse_string = (string[::-1])\n",
    "if string == reverse_string:\n",
    "   print('this string is palindrome')\n",
    "else:\n",
    "    print('this string is not palindrome')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a8e15e5-6fd5-449f-a6a1-9641260cda79",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d36840d4-a668-472e-b602-878cf8c5441c",
   "metadata": {},
   "source": [
    "# ans.15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "651d653f-640b-4809-b1c3-658c43adb2eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "str = input('enter your string: ')\n",
    "d1 = {}\n",
    "for i in str :\n",
    "    if i in d1:\n",
    "        d1[i]+1\n",
    "    else:\n",
    "        d1[i]=1\n",
    "\n",
    "print(d1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a06da917-3dac-47d6-90bf-4407d1fa4286",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
